{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getRandomQuestion","spell","spells","Math","floor","random","length","console","log","setState","guess","changeInput","event","target","value","checkGuess","passQuestion","prevState","count","answerInput","focus","state","toLowerCase","incantation","score","totalScore","className","alt","src","process","id","this","type","effect","onChange","ref","ip","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ijPAkGeA,G,8DA3Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqDRC,kBAAoB,WAClB,IAAIC,EAAQ,EAAKC,OAAOC,KAAKC,MAAMD,KAAKE,SAAW,EAAKH,OAAOI,SAC/DC,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CACZR,MAAOA,EACPS,MAAO,MA3DQ,EA+DnBC,YAAc,SAACC,GACb,EAAKH,SAAS,CACZC,MAAOE,EAAMC,OAAOC,OACnB,EAAKC,aAlES,EAqEnBC,aAAe,WACb,EAAKP,UAAS,SAAAQ,GACZ,MAAO,CACLC,MAAOD,EAAUC,MAAQ,KAE1B,EAAKlB,kBAAmB,EAAKmB,YAAYC,UA1E3B,EA6EnBL,WAAa,WACP,EAAKM,MAAMX,MAAMY,gBAAkB,EAAKD,MAAMpB,MAAMsB,YAAYD,eAElE,EAAKb,UAAS,SAAAQ,GACZ,MAAO,CACLO,MAAOP,EAAUO,MAAQ,EACzBN,MAAOD,EAAUC,MAAQ,KAE1B,EAAKlB,oBAnFV,EAAKE,OAASA,EAAOA,OACrB,EAAKuB,WAAa,EAAKvB,OAAOI,OAC9B,EAAKe,MAAQ,CACXpB,MAAO,GACPS,MAAO,GACPc,MAAO,EACPN,MAAO,GARQ,E,qDAYT,IAAD,OACP,OACE,yBAAKQ,UAAU,OAEb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,WAAWC,IAAI,OAAOC,IAAKC,8CAE1C,6BACE,iDAIJ,yBAAKH,UAAU,WAEb,yBAAKI,GAAG,YACN,2BAAG,8BAAOC,KAAKV,MAAMpB,MAAM+B,MAA3B,IAAyCD,KAAKV,MAAMpB,MAAMgC,SAG5D,yBAAKH,GAAG,UACN,2BAAOE,KAAK,OAAOlB,MAAOiB,KAAKV,MAAMX,MAAOwB,SAAUH,KAAKpB,YAAawB,IAAK,SAACC,GAAD,OAAQ,EAAKjB,YAAciB,MAG1G,4BAAQC,QAASN,KAAKf,cAAtB,QAEA,yBAAKc,GAAG,SACN,6CACkBC,KAAKV,MAAMG,MAD7B,WAC4CO,KAAKV,MAAMH,MACrD,6BACA,6CAAmBa,KAAKN,kB,0CAWlCM,KAAK/B,wB,GArDSsC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.ecbe80da.chunk.js","sourcesContent":["import React from 'react';\nimport spells from './data/spells.json'\nimport './css/skeleton.css'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.spells = spells.spells;\n    this.totalScore = this.spells.length;\n    this.state = {\n      spell: \"\",\n      guess: \"\",\n      score: 0,\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"header\">\n          <img className=\"App-logo\" alt=\"logo\" src={process.env.PUBLIC_URL + '/hogwarts-logo.png'} /> \n\n          <div>\n            <h1>Guess the Spell</h1>\n          </div>\n        </div>\n\n        <div className=\"content\">\n\n          <div id=\"question\">\n            <p><code>{this.state.spell.type}</code> {this.state.spell.effect}</p>\n          </div>\n\n          <div id=\"answer\">\n            <input type=\"text\" value={this.state.guess} onChange={this.changeInput} ref={(ip) => this.answerInput = ip} />\n          </div>\n\n          <button onClick={this.passQuestion}>Pass</button>\n\n          <div id=\"score\">\n            <p>\n              Current score: {this.state.score} out of {this.state.count}\n              <br />\n              <small>Max score: {this.totalScore}</small>  \n            </p>\n          </div>\n\n        </div>\n        \n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.getRandomQuestion();\n  }\n\n  getRandomQuestion = () => {\n    let spell = this.spells[Math.floor(Math.random() * this.spells.length)];\n    console.log(spell);\n    this.setState({\n      spell: spell,\n      guess: \"\"\n    });\n  }\n\n  changeInput = (event) => {\n    this.setState({\n      guess: event.target.value\n    }, this.checkGuess);\n  }\n\n  passQuestion = () => {\n    this.setState(prevState => {\n      return {\n        count: prevState.count + 1\n      }\n    }, this.getRandomQuestion, this.answerInput.focus());\n  }\n\n  checkGuess = () => {\n    if (this.state.guess.toLowerCase() === this.state.spell.incantation.toLowerCase()) {\n      // Correct answer\n      this.setState(prevState => {\n        return {\n          score: prevState.score + 1,\n          count: prevState.count + 1\n        }\n      }, this.getRandomQuestion);\n    } \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}