{"version":3,"sources":["Question.js","AnswerHard.js","AnswerEasy.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["Question","id","this","props","spell","type","effect","React","Component","AnswerHard","changeInput","event","getAnswer","target","value","passButton","clickedPass","answerInput","focus","className","input","onChange","ref","ip","onClick","AnswerEasy","selectChoice","innerHTML","multipleChoices","incantation","Result","score","count","toFixed","totalScore","App","getRandomQuestion","randomIndex","Math","floor","random","state","remainingSpells","length","console","log","newRemainingSpells","splice","choices","getMultipleChoices","setState","guess","correctChoice","allChoices","spells","correctChoiceIndex","indexOf","selected","sort","slice","concat","answer","checkGuess","passQuestion","prevState","toLowerCase","hardMode","switchDifficulty","difficultyMode","alt","src","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yjPAoBeA,G,mLAbX,OACE,yBAAKC,GAAG,YACN,2BACE,8BAAOC,KAAKC,MAAMC,MAAMC,MACxB,6BACCH,KAAKC,MAAMC,MAAME,a,GARLC,IAAMC,YC4CdC,E,4MAXbC,YAAc,SAACC,GACb,EAAKR,MAAMS,UAAUD,EAAME,OAAOC,Q,EAGpCC,WAAa,SAACJ,GACZ,EAAKR,MAAMa,cACX,EAAKC,YAAYC,S,uDA5BT,IAAD,OACP,OACE,yBAAKC,UAAU,cACb,6BACE,2BAAOd,KAAK,OAAOS,MAAOZ,KAAKC,MAAMiB,MAAOC,SAAUnB,KAAKQ,YAAaY,IAAK,SAACC,GAAD,OAAQ,EAAKN,YAAcM,MAG1G,4BAAQC,QAAStB,KAAKa,YAAtB,a,GAhBiBR,IAAMC,WCoChBiB,E,4MAPbC,aAAe,SAACf,GAEd,EAAKR,MAAMS,UAAUD,EAAME,OAAOc,Y,uDA/BlC,OACE,yBAAKR,UAAU,cAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iCACb,4BAAQA,UAAU,uBAAuBK,QAAStB,KAAKwB,cACpDxB,KAAKC,MAAMyB,gBAAgB,GAAGC,aAEjC,4BAAQV,UAAU,uBAAuBK,QAAStB,KAAKwB,cACpDxB,KAAKC,MAAMyB,gBAAgB,GAAGC,cAInC,yBAAKV,UAAU,iBACb,4BAAQA,UAAU,uBAAuBK,QAAStB,KAAKwB,cACpDxB,KAAKC,MAAMyB,gBAAgB,GAAGC,aAEjC,4BAAQV,UAAU,uBAAuBK,QAAStB,KAAKwB,cACpDxB,KAAKC,MAAMyB,gBAAgB,GAAGC,eAKrC,kC,GA1BiBtB,IAAMC,WCiBhBsB,E,uKAdX,OACE,yBAAK7B,GAAG,SACN,6CACkBC,KAAKC,MAAM4B,MAD7B,WAC4C7B,KAAKC,MAAM6B,MACpD9B,KAAKC,MAAM6B,MAAQ,EAAI,MAAQ9B,KAAKC,MAAM4B,MAAQ7B,KAAKC,MAAM6B,MAAQ,KAAKC,QAAQ,GAAK,MAAQ,GAChG,6BACA,6CAAmB/B,KAAKC,MAAM+B,kB,GATnB3B,IAAMC,WCwKZ2B,E,kDA/Jb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IA4ERiC,kBAAoB,WAElB,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,gBAAgBC,QACpEvC,EAAQ,EAAKqC,MAAMC,gBAAgBL,GACvCO,QAAQC,IAAI,cAAgBzC,EAAMyB,aAGlC,IAAIiB,EAAkB,YAAO,EAAKL,MAAMC,iBACxCI,EAAmBC,OAAOV,EAAa,GAGvC,IAAIW,EAAU,EAAKC,mBAAmB7C,GAEtC,EAAK8C,SAAS,CACZ9C,MAAOA,EACP+C,MAAO,GACPT,gBAAiBI,EACjBlB,gBAAiBoB,KA9FF,EAkGnBC,mBAAqB,SAACG,GAEpB,IAAIC,EAAU,YAAO,EAAKC,QACtBC,EAAqBF,EAAWG,QAAQJ,IAChB,IAAxBG,GAA2BF,EAAWN,OAAOQ,EAAoB,GAGrE,IACIE,EADWJ,EAAWK,MAAK,iBAAM,GAAMpB,KAAKE,YACxBmB,MAAM,EAAG,GAMjC,MAHsB,CAACP,GAAeQ,OAAOH,GACCC,MAAK,iBAAM,GAAMpB,KAAKE,aA9GnD,EAmHnB5B,UAAY,SAACiD,GACX,EAAKX,SAAS,CACZC,MAAOU,GACN,EAAKC,aAtHS,EAyHnBC,aAAe,WACb,EAAKb,UAAS,SAAAc,GACZ,MAAO,CACLhC,MAAOgC,EAAUhC,MAAQ,KAE1B,EAAKI,oBA9HS,EAiInB0B,WAAa,WACP,EAAKrB,MAAMU,MAAMc,gBAAkB,EAAKxB,MAAMrC,MAAMyB,YAAYoC,cAElE,EAAKf,UAAS,SAAAc,GACZ,MAAO,CACLjC,MAAOiC,EAAUjC,MAAQ,EACzBC,MAAOgC,EAAUhC,MAAQ,KAE1B,EAAKI,mBAEH,EAAK8B,UACR,EAAKhB,UAAS,SAAAc,GACZ,MAAO,CACLhC,MAAOgC,EAAUhC,MAAQ,KAE1B,EAAKI,oBAhJK,EAqJnB+B,iBAAmB,WACjB,EAAKjB,UAAS,SAAAc,GACZ,MAAO,CACLE,UAAWF,EAAUE,cAtJzB,EAAKZ,OAASA,EAAOA,OACrB,EAAKpB,WAAa,EAAKoB,OAAOX,OAC9B,EAAKF,MAAQ,CACXC,gBAAiB,EAAKY,OACtBlD,MAAO,GACPwB,gBAAiB,GACjBuB,MAAO,GACPpB,MAAO,EACPC,MAAO,EACPkC,UAAU,GAXK,E,qDAgBjB,IAAIE,EAkBJ,OAhBEA,EADElE,KAAKuC,MAAMyB,SAEX,kBAAC,EAAD,CACEtD,UAAWV,KAAKU,UAChBI,YAAad,KAAK6D,aAClB3C,MAAOlB,KAAKuC,MAAMU,QAKpB,kBAAC,EAAD,CACEvC,UAAWV,KAAKU,UAChBgB,gBAAiB1B,KAAKuC,MAAMb,kBAMhC,yBAAKT,UAAU,OAEb,yBAAKA,UAAU,oBACb,4BAAQK,QAAStB,KAAKiE,kBACnBjE,KAAKuC,MAAMyB,SAAW,YAAc,cAIzC,yBAAK/C,UAAU,UACb,yBAAKA,UAAU,WAAWkD,IAAI,OAAOC,IAAKC,qCAE1C,6BACE,4BACGrE,KAAKuC,MAAMyB,SAAW,kBAAoB,qBAKjD,yBAAK/C,UAAU,WAEb,kBAAC,EAAD,CACEf,MAAOF,KAAKuC,MAAMrC,QAGnBgE,EAED,kBAAC,EAAD,CACEpC,MAAO9B,KAAKuC,MAAMT,MAClBD,MAAO7B,KAAKuC,MAAMV,MAClBG,WAAYhC,KAAKgC,iB,0CAUzBhC,KAAKkC,wB,GA5ES7B,IAAMC,WCEJgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.8859d3a4.chunk.js","sourcesContent":["import React from 'react';\r\n// import spells from './data/spells.json'\r\n// import './css/skeleton.css'\r\n\r\nclass Question extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"question\">\r\n        <p>\r\n          <code>{this.props.spell.type}</code>\r\n          <br />\r\n          {this.props.spell.effect}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n// import spells from './data/spells.json'\r\n// import './css/skeleton.css'\r\n// import './App.css';\r\n\r\n\r\nclass AnswerHard extends React.Component {\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     guess: \"\",\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"answerHard\">\r\n        <div>\r\n          <input type=\"text\" value={this.props.input} onChange={this.changeInput} ref={(ip) => this.answerInput = ip} />\r\n        </div>\r\n\r\n        <button onClick={this.passButton}>Pass</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // changeInput = (event) => {\r\n  //   this.setState({\r\n  //     guess: event.target.value\r\n  //   }, this.updateGuess);\r\n  // }\r\n\r\n  // updateGuess = () => {\r\n  //   this.props.getAnswer(this.state.guess);\r\n  // }\r\n\r\n  changeInput = (event) => {\r\n    this.props.getAnswer(event.target.value);\r\n  }\r\n\r\n  passButton = (event) => {\r\n    this.props.clickedPass();\r\n    this.answerInput.focus()\r\n  }\r\n\r\n}\r\n\r\nexport default AnswerHard;\r\n","import React from 'react';\r\n\r\n\r\nclass AnswerEasy extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"answerEasy\">\r\n\r\n        <div className=\"row\">\r\n          <div className=\"three offset-by-three columns\">\r\n            <button className=\"multipleChoiceButton\" onClick={this.selectChoice}>\r\n              {this.props.multipleChoices[0].incantation}\r\n            </button>\r\n            <button className=\"multipleChoiceButton\" onClick={this.selectChoice}>\r\n              {this.props.multipleChoices[1].incantation}\r\n            </button>\r\n          </div>\r\n            \r\n          <div className=\"three columns\">\r\n            <button className=\"multipleChoiceButton\" onClick={this.selectChoice}>\r\n              {this.props.multipleChoices[2].incantation}\r\n            </button>\r\n            <button className=\"multipleChoiceButton\" onClick={this.selectChoice}>\r\n              {this.props.multipleChoices[3].incantation}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <br />\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  selectChoice = (event) => {\r\n    // console.log(event.target.innerHTML)\r\n    this.props.getAnswer(event.target.innerHTML);\r\n  }\r\n\r\n}\r\n\r\nexport default AnswerEasy;\r\n","import React from 'react';\r\n\r\n\r\nclass Result extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"score\">\r\n        <p>\r\n          Current score: {this.props.score} out of {this.props.count} \r\n          {this.props.count > 0 ? ' (' + (this.props.score / this.props.count * 100).toFixed(1) + ' %)' : ''}\r\n          <br />\r\n          <small>Max score: {this.props.totalScore}</small>  \r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport spells from './data/spells.json'\r\nimport './css/skeleton.css'\r\nimport './App.css';\r\nimport Question from './Question';\r\nimport AnswerHard from './AnswerHard';\r\nimport AnswerEasy from './AnswerEasy';\r\nimport Result from './Result';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.spells = spells.spells;\r\n    this.totalScore = this.spells.length;\r\n    this.state = {\r\n      remainingSpells: this.spells,\r\n      spell: \"\",\r\n      multipleChoices: [],\r\n      guess: \"\",\r\n      score: 0,\r\n      count: 0,\r\n      hardMode: true\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let difficultyMode;\r\n    if (this.state.hardMode) {\r\n      difficultyMode = (\r\n        <AnswerHard \r\n          getAnswer={this.getAnswer} \r\n          clickedPass={this.passQuestion} \r\n          input={this.state.guess} \r\n        />\r\n      );\r\n    } else {\r\n      difficultyMode = (\r\n        <AnswerEasy \r\n          getAnswer={this.getAnswer} \r\n          multipleChoices={this.state.multipleChoices} \r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <div className=\"difficultySwitch\">\r\n          <button onClick={this.switchDifficulty}>\r\n            {this.state.hardMode ? 'Easy Mode' : 'Hard Mode'}\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"header\">\r\n          <img className=\"App-logo\" alt=\"logo\" src={process.env.PUBLIC_URL + '/hogwarts-logo.png'} /> \r\n\r\n          <div>\r\n            <h1>\r\n              {this.state.hardMode ? \"Spell the Spell\" : \"Guess the Spell\"}\r\n            </h1>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"content\">\r\n\r\n          <Question \r\n            spell={this.state.spell} \r\n          />\r\n\r\n          {difficultyMode}\r\n\r\n          <Result \r\n            count={this.state.count}\r\n            score={this.state.score}\r\n            totalScore={this.totalScore}\r\n          />\r\n\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRandomQuestion();\r\n  }\r\n\r\n  getRandomQuestion = () => {\r\n    // Select a random item from array\r\n    let randomIndex = Math.floor(Math.random() * this.state.remainingSpells.length);\r\n    let spell = this.state.remainingSpells[randomIndex];\r\n    console.log(\"Answer is: \" + spell.incantation);\r\n    \r\n    // Remove selected item from array\r\n    let newRemainingSpells = [...this.state.remainingSpells]\r\n    newRemainingSpells.splice(randomIndex, 1);\r\n\r\n    // Get multiple choices\r\n    let choices = this.getMultipleChoices(spell);\r\n\r\n    this.setState({\r\n      spell: spell,\r\n      guess: \"\",\r\n      remainingSpells: newRemainingSpells,\r\n      multipleChoices: choices\r\n    });\r\n  }\r\n\r\n  getMultipleChoices = (correctChoice) => {\r\n    // Get array of option and remove the correct one\r\n    let allChoices = [...this.spells]\r\n    let correctChoiceIndex = allChoices.indexOf(correctChoice);\r\n    if (correctChoiceIndex !== -1) allChoices.splice(correctChoiceIndex, 1);\r\n\r\n    // Select 3 \"wrong\" options at random (shuffle the array and pick first 3)\r\n    let shuffled = allChoices.sort(() => 0.5 - Math.random());\r\n    let selected = shuffled.slice(0, 3);\r\n\r\n    // Merge with the correct answer and shuffle\r\n    let multipleChoices = [correctChoice].concat(selected);\r\n    let shuffledMultipleChoices = multipleChoices.sort(() => 0.5 - Math.random());\r\n    // console.log(shuffledMultipleChoices);\r\n    return shuffledMultipleChoices;\r\n  }\r\n\r\n  getAnswer = (answer) => {\r\n    this.setState({\r\n      guess: answer\r\n    }, this.checkGuess);\r\n  }\r\n\r\n  passQuestion = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        count: prevState.count + 1\r\n      }\r\n    }, this.getRandomQuestion);\r\n  }\r\n\r\n  checkGuess = () => {\r\n    if (this.state.guess.toLowerCase() === this.state.spell.incantation.toLowerCase()) {\r\n      // Correct answer\r\n      this.setState(prevState => {\r\n        return {\r\n          score: prevState.score + 1,\r\n          count: prevState.count + 1\r\n        }\r\n      }, this.getRandomQuestion);\r\n    } else {\r\n      if (!this.hardMode) {\r\n        this.setState(prevState => {\r\n          return {\r\n            count: prevState.count + 1\r\n          }\r\n        }, this.getRandomQuestion);\r\n      }\r\n    }\r\n  }\r\n\r\n  switchDifficulty = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        hardMode: !prevState.hardMode\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}